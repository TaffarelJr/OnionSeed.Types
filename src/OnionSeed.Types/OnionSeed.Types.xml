<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OnionSeed.Types</name>
    </assembly>
    <members>
        <member name="T:OnionSeed.Types.HashCode">
            <summary>
            Encapsulates a fluent way to combine multiple hash codes together.
            </summary>
            <remarks>This code is taken and modified from Muhammad Rehan Saeed's blog
            (https://rehansaeed.com/gethashcode-made-easy/). He's a Microsoft developer.
            <para>This could be replaced by the new HashCode class introduced in .NET Standard 2.1.</para></remarks>
        </member>
        <member name="M:OnionSeed.Types.HashCode.op_Implicit(OnionSeed.Types.HashCode)~System.Int32">
            <summary>
            Converts the given <see cref="T:OnionSeed.Types.HashCode"/> to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="hashCode">The <see cref="T:OnionSeed.Types.HashCode"/> to be converted.</param>
        </member>
        <member name="M:OnionSeed.Types.HashCode.Of``1(``0)">
            <summary>
            Calculates the hash code of the given item.
            </summary>
            <typeparam name="T">The data type of the item.</typeparam>
            <param name="item">The item for which a hash code should be calculated.</param>
            <returns>The hash code of the given item.</returns>
        </member>
        <member name="M:OnionSeed.Types.HashCode.OfEach``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calculates the hash code of the given set of items.
            </summary>
            <typeparam name="T">The data type of the items in the set.</typeparam>
            <param name="items">The set for which a hash code should be calculated.</param>
            <returns>The hash code of the given set of items.</returns>
        </member>
        <member name="M:OnionSeed.Types.HashCode.And``1(``0)">
            <summary>
            Adds the hash code of the given item to the current instance.
            </summary>
            <typeparam name="T">The data type of the item.</typeparam>
            <param name="item">The item whose hash code should be added to the current instance.</param>
            <returns>The hash code of the given item combined with the current instance.</returns>
        </member>
        <member name="M:OnionSeed.Types.HashCode.AndEach``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the hash code of the given set of items to the current instance.
            </summary>
            <typeparam name="T">The data type of the items in the set.</typeparam>
            <param name="items">>The set whose hash code should be added to the current instance.</param>
            <returns>The hash code of the given set of items combined with the current instance.</returns>
        </member>
        <member name="T:OnionSeed.Types.Interval`1">
            <summary>
            Represents a mathematical interval. The interval can be iterated at varying levels of granularity,
            without needing to store every value in the interval.
            </summary>
            <typeparam name="T">The type of values in the interval.</typeparam>
            <remarks>Details on mathematical intervals can be found here: https://en.wikipedia.org/wiki/Interval_(mathematics) .</remarks>
        </member>
        <member name="M:OnionSeed.Types.Interval`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Types.Interval`1"/> struct.
            </summary>
            <param name="min">The minimum (left) endpoint in the interval.</param>
            <param name="max">The maximum (right) endpoint in the interval.</param>
            <remarks>By default, the interval will be closed (inclusive).</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="min"/> is <c>null</c>.
            -or- <paramref name="max"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Types.Interval`1.#ctor(System.Boolean,`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Types.Interval`1"/> struct.
            </summary>
            <param name="minIsIncluded">A value indicating whether the <see cref="P:OnionSeed.Types.Interval`1.Min"/> endpoint is included in the interval.</param>
            <param name="min">The minimum (left) endpoint in the interval.</param>
            <param name="max">The maximum (right) endpoint in the interval.</param>
            <param name="maxIsIncluded">A value indicating whether the <see cref="P:OnionSeed.Types.Interval`1.Max"/> endpoint is included in the interval.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="min"/> is <c>null</c>.
            -or- <paramref name="max"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Types.Interval`1.Min">
            <summary>
            Gets the minimum (left) endpoint in the interval.
            </summary>
        </member>
        <member name="P:OnionSeed.Types.Interval`1.Max">
            <summary>
            Gets the maximum (right) endpoint in the interval.
            </summary>
        </member>
        <member name="P:OnionSeed.Types.Interval`1.MinIsIncluded">
            <summary>
            Gets a value indicating whether the <see cref="P:OnionSeed.Types.Interval`1.Min"/> endpoint is included in the interval.
            </summary>
        </member>
        <member name="P:OnionSeed.Types.Interval`1.MaxIsIncluded">
            <summary>
            Gets a value indicating whether the <see cref="P:OnionSeed.Types.Interval`1.Max"/> endpoint is included in the interval.
            </summary>
        </member>
        <member name="P:OnionSeed.Types.Interval`1.IsOpen">
            <summary>
            Gets a value indicating whether the interval does not include any of its endpoints.
            </summary>
        </member>
        <member name="P:OnionSeed.Types.Interval`1.IsHalfOpen">
            <summary>
            Gets a value indicating whether the interval includes exactly one of its endpoints.
            </summary>
        </member>
        <member name="P:OnionSeed.Types.Interval`1.IsClosed">
            <summary>
            Gets a value indicating whether the interval includes both of its endpoints.
            </summary>
        </member>
        <member name="P:OnionSeed.Types.Interval`1.IsEmpty">
            <summary>
            Gets a value indicating whether the interval contains zero elements.
            </summary>
        </member>
        <member name="P:OnionSeed.Types.Interval`1.IsDegenerate">
            <summary>
            Gets a value indicating whether the interval contains exactly one element.
            </summary>
        </member>
        <member name="P:OnionSeed.Types.Interval`1.IsProper">
            <summary>
            Gets a value indicating whether the interval is neither empty nor degenerate
            (i.e. it has potentially infinite elements).
            </summary>
        </member>
        <member name="M:OnionSeed.Types.Interval`1.op_Equality(OnionSeed.Types.Interval{`0},OnionSeed.Types.Interval{`0})">
            <summary>
            Returns <c>true</c> if the operands are equal, otherwise <c>false</c>.
            </summary>
            <param name="left">The first operand.</param>
            <param name="right">The second operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:OnionSeed.Types.Interval`1.op_Inequality(OnionSeed.Types.Interval{`0},OnionSeed.Types.Interval{`0})">
            <summary>
            Returns <c>false</c> if the operands are equal, otherwise <c>true</c>.
            </summary>
            <param name="left">The first operand.</param>
            <param name="right">The second operand.</param>
            <returns><c>false</c> if the operands are equal, otherwise <c>true</c>.</returns>
        </member>
        <member name="M:OnionSeed.Types.Interval`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:OnionSeed.Types.Interval`1.Equals(OnionSeed.Types.Interval{`0})">
            <inheritdoc />
        </member>
        <member name="M:OnionSeed.Types.Interval`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:OnionSeed.Types.Interval`1.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:OnionSeed.Types.Interval`1.Ascending(System.Func{`0,`0})">
            <summary>
            Enumerates the values that fall within the interval, in ascending order (from <see cref="P:OnionSeed.Types.Interval`1.Min"/> to <see cref="P:OnionSeed.Types.Interval`1.Max"/>).
            </summary>
            <param name="increment">The method that determines how to increment from one value to the next.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the values in the interval,
            in ascending order, as determined by the <paramref name="increment"/> algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="increment"/> is <b>null</b>.</exception>
            <remarks>If <paramref name="increment"/> does not move the current value from <see cref="P:OnionSeed.Types.Interval`1.Min"/> towards <see cref="P:OnionSeed.Types.Interval`1.Max"/>,
            then this enumeration will result in an infinite loop.</remarks>
        </member>
        <member name="M:OnionSeed.Types.Interval`1.Descending(System.Func{`0,`0})">
            <summary>
            Enumerates the values that fall within the interval, in descending order (from <see cref="P:OnionSeed.Types.Interval`1.Max"/> to <see cref="P:OnionSeed.Types.Interval`1.Min"/>).
            </summary>
            <param name="decrement">The method that determines how to decrement from one value to the next.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the values in the interval,
            in descending order, as determined by the <paramref name="decrement"/> algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="decrement"/> is <b>null</b>.</exception>
            <remarks>If <paramref name="decrement"/> does not move the current value from <see cref="P:OnionSeed.Types.Interval`1.Max"/> towards <see cref="P:OnionSeed.Types.Interval`1.Min"/>,
            then this enumeration will result in an infinite loop.</remarks>
        </member>
    </members>
</doc>
